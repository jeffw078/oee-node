<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Apontamento de Soldagem - Sistema OEE</title>
    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    
    <style>
        body { 
            font-family: 'Segoe UI', sans-serif; 
            background-color: #f8f9fa; 
        }
        .header-sistema { 
            background: linear-gradient(135deg, #dc3545, #c82333); 
            color: white; 
            padding: 1rem 0; 
            position: relative; 
        }
        .logo-empresa { 
            display: flex; 
            align-items: center; 
            gap: 10px; 
        }
        .status-conexao { 
            position: absolute; 
            top: 15px; 
            right: 20px; 
        }
        .status-online { 
            background-color: #28a745; 
            color: white; 
            padding: 5px 12px; 
            border-radius: 20px; 
        }
        .relogio-display { 
            font-size: 2.5rem; 
            font-weight: bold; 
            color: #dc3545; 
            text-align: center; 
            margin: 20px 0; 
        }
        .saudacao-soldador { 
            background-color: #e9ecef; 
            padding: 15px; 
            border-radius: 10px; 
            text-align: center; 
            margin: 20px 0; 
            font-size: 1.3rem; 
        }
        .btn-modulo { 
            background: linear-gradient(135deg, #dc3545, #c82333); 
            color: white; 
            border: none; 
            border-radius: 15px; 
            height: 120px; 
            font-size: 1.4rem; 
            font-weight: bold; 
            transition: all 0.3s ease; 
        }
        .btn-modulo:hover { 
            transform: translateY(-3px); 
            color: white; 
        }
        .btn-componente {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            border-radius: 10px;
            height: 80px;
            font-size: 1.1rem;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .btn-componente:hover {
            transform: translateY(-2px);
            color: white;
        }
        .processo-ativo {
            background-color: #d4edda;
            border: 2px solid #28a745;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
        }
        .cronometro-display {
            font-size: 3rem;
            font-weight: bold;
            color: #28a745;
            text-align: center;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
        }
        .spinner { 
            border: 4px solid #f3f3f3; 
            border-top: 4px solid #dc3545; 
            border-radius: 50%; 
            width: 40px; 
            height: 40px; 
            animation: spin 1s linear infinite; 
            margin: 20px auto; 
        }
        @keyframes spin { 
            0% { transform: rotate(0deg); } 
            100% { transform: rotate(360deg); } 
        }
    </style>
</head>
<body>
    <header class="header-sistema">
        <div class="container">
            <div class="row align-items-center">
                <div class="col">
                    <div class="logo-empresa">
                        <div style="background: white; color: #dc3545; padding: 5px 10px; border-radius: 5px; font-weight: bold;">
                            SteelMast
                        </div>
                        <h3 class="mb-0">Sistema de Apontamento OEE</h3>
                    </div>
                </div>
            </div>
            <div class="status-conexao">
                <div class="status-online">‚óè Online</div>
                <% if (locals.usuario) { %>
                    <a href="/soldagem/finalizar-turno" class="btn btn-outline-light btn-sm ms-2">üö™ SAIR</a>
                <% } %>
            </div>
        </div>
    </header>
    
    <main>
        <div class="container mt-3">
            <!-- Sauda√ß√£o e rel√≥gio -->
            <div class="saudacao-soldador">
                <%= saudacao %>, <strong><%= soldador.nome_completo %>!</strong>
            </div>
            
            <div class="relogio-display" id="relogioApontamento"></div>
            
            <% if (apontamentoAtivo) { %>
                <!-- Processo em andamento -->
                <div class="processo-ativo">
                    <h4>üî• Soldagem em Andamento: <%= apontamentoAtivo.modulo_nome %></h4>
                    <hr>
                    <div class="row text-center">
                        <div class="col-md-3">
                            <strong>Pedido:</strong><br>
                            <%= apontamentoAtivo.pedido_numero %>
                        </div>
                        <div class="col-md-3">
                            <strong>Poste/Tubo:</strong><br>
                            <%= apontamentoAtivo.numero_poste_tubo %>
                        </div>
                        <div class="col-md-3">
                            <strong>Componente:</strong><br>
                            <%= apontamentoAtivo.componente_nome %>
                        </div>
                        <div class="col-md-3">
                            <strong>In√≠cio:</strong><br>
                            <%= new Date(apontamentoAtivo.inicio_processo).toLocaleTimeString('pt-BR') %>
                        </div>
                    </div>
                    
                    <% if (apontamentoAtivo.diametro) { %>
                        <div class="mt-2 text-center">
                            <strong>Di√¢metro do Tubo:</strong> <%= apontamentoAtivo.diametro %> mm
                        </div>
                    <% } %>
                    
                    <div class="cronometro-display" id="cronometroDisplay">00:00:00</div>
                    
                    <!-- Bot√µes de a√ß√£o durante soldagem -->
                    <div class="row mt-4">
                        <div class="col-6">
                            <button class="btn btn-success btn-lg w-100" id="btnFinalizarComponente">
                                ‚úÖ Finalizar Atividade
                            </button>
                        </div>
                        <div class="col-6">
                            <div class="row">
                                <div class="col-4">
                                    <button class="btn btn-warning w-100" data-painel="paradas">
                                        ‚è∏Ô∏è Pausa
                                    </button>
                                </div>
                                <div class="col-4">
                                    <button class="btn btn-info w-100" data-painel="qualidade">
                                        üîç Qualidade
                                    </button>
                                </div>
                                <div class="col-4">
                                    <button class="btn btn-secondary w-100" data-painel="manutencao">
                                        üîß Manuten√ß√£o
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
            <% } else if (paradaAtiva) { %>
                <!-- Parada ativa -->
                <div class="processo-ativo bg-warning">
                    <h4>‚è∏Ô∏è Parada Ativa: <%= paradaAtiva.tipo_nome %></h4>
                    <hr>
                    <div class="cronometro-display text-warning" id="cronometroParada">00:00:00</div>
                    
                    <div class="mt-3 text-center">
                        <button class="btn btn-success btn-lg" id="btnFinalizarParada" data-parada-id="<%= paradaAtiva.id %>">
                            ‚ñ∂Ô∏è Retomar Trabalho
                        </button>
                    </div>
                </div>
                
            <% } else { %>
                <!-- Sele√ß√£o de m√≥dulos -->
                <div class="text-center mb-4">
                    <h4>Selecione o m√≥dulo para iniciar:</h4>
                </div>
                
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="row">
                            <% modulos.forEach(modulo => { %>
                                <div class="col-sm-6 mb-3">
                                    <button class="btn btn-modulo w-100" 
                                            data-modulo-id="<%= modulo.id %>"
                                            data-modulo-nome="<%= modulo.nome %>">
                                        <%= modulo.nome %>
                                    </button>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                </div>
                
                <!-- Bot√µes secund√°rios -->
                <div class="row justify-content-center mt-4">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-4">
                                <button class="btn btn-info w-100" data-painel="qualidade">
                                    üîç Qualidade
                                </button>
                            </div>
                            <div class="col-4">
                                <button class="btn btn-warning w-100" data-painel="paradas">
                                    ‚è∏Ô∏è Parada
                                </button>
                            </div>
                            <div class="col-4">
                                <button class="btn btn-danger w-100" id="btnFinalizarTurno">
                                    üö™ Finalizar Turno
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            <% } %>
        </div>

        <!-- Modal de sele√ß√£o de pedido/tubo -->
        <div class="modal fade" id="modalPedidoTubo" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">üìã Informa√ß√µes do Processo</h5>
                    </div>
                    <div class="modal-body">
                        <p>M√≥dulo selecionado: <strong id="moduloSelecionado"></strong></p>
                        
                        <div class="mb-3">
                            <label for="numeroPedido" class="form-label">N√∫mero do Pedido:</label>
                            <input type="text" class="form-control" id="numeroPedido" placeholder="Ex: 5454">
                        </div>
                        
                        <div class="mb-3">
                            <label for="numeroPosteTubo" class="form-label">N√∫mero do Poste/Tubo:</label>
                            <input type="text" class="form-control" id="numeroPosteTubo" placeholder="Ex: 1">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary" id="btnConfirmarModulo">Continuar</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal de componentes -->
        <div class="modal fade" id="modalComponentes" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title">üîß Componentes do <span id="tituloModuloComponentes"></span></h5>
                        <button type="button" class="btn-close btn-close-white" id="btnVoltarParaModulos"></button>
                    </div>
                    <div class="modal-body">
                        <div id="gridComponentes" class="row">
                            <!-- Componentes ser√£o carregados aqui -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal de di√¢metro -->
        <div class="modal fade" id="modalDiametro" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-info text-white">
                        <h5 class="modal-title">üìè Di√¢metro do Tubo</h5>
                    </div>
                    <div class="modal-body">
                        <p>Componente: <strong id="componenteSelecionado"></strong></p>
                        
                        <div class="mb-3">
                            <label for="diametroTubo" class="form-label">Di√¢metro (mm):</label>
                            <input type="number" class="form-control" id="diametroTubo" placeholder="Ex: 800" step="0.1">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="btnVoltarParaComponentes">Voltar</button>
                        <button type="button" class="btn btn-success" id="btnIniciarComponenteComDiametro">Iniciar Soldagem</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        let moduloAtual = null;
        let componenteAtual = null;
        let dadosProcesso = {};
        let inicioProcesso = null;
        let inicioParada = null;
        let intervaloCronometro = null;
        
        // Fun√ß√£o para mostrar/esconder loading
        function mostrarLoading() {
            const loading = document.createElement('div');
            loading.innerHTML = '<div class="spinner"></div>';
            loading.style.position = 'fixed';
            loading.style.top = '0';
            loading.style.left = '0';
            loading.style.width = '100%';
            loading.style.height = '100%';
            loading.style.backgroundColor = 'rgba(0,0,0,0.5)';
            loading.style.zIndex = '9999';
            loading.style.display = 'flex';
            loading.style.alignItems = 'center';
            loading.style.justifyContent = 'center';
            loading.id = 'loadingOverlay';
            document.body.appendChild(loading);
        }
        
        function esconderLoading() {
            const loading = document.getElementById('loadingOverlay');
            if (loading) loading.remove();
        }
        
        // Fun√ß√£o para atualizar cron√¥metro
        function atualizarCronometro() {
            if (inicioProcesso) {
                const agora = new Date();
                const diff = agora - inicioProcesso;
                const horas = Math.floor(diff / 3600000);
                const minutos = Math.floor((diff % 3600000) / 60000);
                const segundos = Math.floor((diff % 60000) / 1000);
                
                const cronometroElement = document.getElementById('cronometroDisplay');
                if (cronometroElement) {
                    cronometroElement.textContent = 
                        `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;
                }
            }
            
            if (inicioParada) {
                const agora = new Date();
                const diff = agora - inicioParada;
                const horas = Math.floor(diff / 3600000);
                const minutos = Math.floor((diff % 3600000) / 60000);
                const segundos = Math.floor((diff % 60000) / 1000);
                
                const cronometroParadaElement = document.getElementById('cronometroParada');
                if (cronometroParadaElement) {
                    cronometroParadaElement.textContent = 
                        `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;
                }
            }
        }
        
        // Inicializa√ß√£o
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Tela de apontamento carregada');
            
            // Configurar cron√¥metros se houver processo/parada ativa
            <% if (apontamentoAtivo) { %>
                inicioProcesso = new Date('<%= apontamentoAtivo.inicio_processo %>');
                setInterval(atualizarCronometro, 1000);
                atualizarCronometro();
                console.log('Cron√¥metro de processo iniciado');
            <% } %>
            
            <% if (paradaAtiva) { %>
                inicioParada = new Date('<%= paradaAtiva.inicio %>');
                setInterval(atualizarCronometro, 1000);
                atualizarCronometro();
                console.log('Cron√¥metro de parada iniciado');
            <% } %>
            
            // Event listeners para bot√µes de m√≥dulo
            document.querySelectorAll('[data-modulo-id]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.getAttribute('data-modulo-id');
                    const nome = this.getAttribute('data-modulo-nome');
                    selecionarModulo(id, nome);
                });
            });
            
            // Event listeners para outros bot√µes
            const btnFinalizarComponente = document.getElementById('btnFinalizarComponente');
            if (btnFinalizarComponente) {
                btnFinalizarComponente.addEventListener('click', finalizarComponente);
            }
            
            const btnFinalizarParada = document.getElementById('btnFinalizarParada');
            if (btnFinalizarParada) {
                btnFinalizarParada.addEventListener('click', function() {
                    const paradaId = this.getAttribute('data-parada-id');
                    finalizarParada(paradaId);
                });
            }
            
            const btnFinalizarTurno = document.getElementById('btnFinalizarTurno');
            if (btnFinalizarTurno) {
                btnFinalizarTurno.addEventListener('click', finalizarTurno);
            }
            
            // Event listeners para pain√©is
            document.querySelectorAll('[data-painel]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const tipo = this.getAttribute('data-painel');
                    abrirPainel(tipo);
                });
            });
            
            // Atualizar rel√≥gio
            function atualizarRelogio() {
                const agora = new Date();
                const relogioElement = document.getElementById('relogioApontamento');
                if (relogioElement) {
                    relogioElement.textContent = agora.toLocaleTimeString('pt-BR');
                }
            }
            setInterval(atualizarRelogio, 1000);
            atualizarRelogio();
            
            console.log('Sistema de apontamento inicializado');
        });
        
        function selecionarModulo(id, nome) {
            console.log('M√≥dulo selecionado:', id, nome);
            // Implementar l√≥gica de sele√ß√£o de m√≥dulo
            alert('Funcionalidade em desenvolvimento: ' + nome);
        }
        
        function finalizarComponente() {
            if (!confirm('Confirma a finaliza√ß√£o da atividade?')) return;
            console.log('Finalizando componente...');
            alert('Funcionalidade em desenvolvimento');
        }
        
        function finalizarParada(paradaId) {
            if (!confirm('Confirma o retorno ao trabalho?')) return;
            console.log('Finalizando parada:', paradaId);
            alert('Funcionalidade em desenvolvimento');
        }
        
        function finalizarTurno() {
            if (!confirm('‚ö†Ô∏è Confirma a finaliza√ß√£o do turno?')) return;
            console.log('Finalizando turno...');
            window.location.href = '/soldagem/finalizar-turno';
        }
        
        function abrirPainel(tipo) {
            const urls = {
                'qualidade': '/qualidade/painel',
                'paradas': '/soldagem/painel-paradas',
                'manutencao': '/manutencao/painel'
            };
            
            console.log('Abrindo painel:', tipo);
            if (urls[tipo]) {
                window.location.href = urls[tipo];
            } else {
                alert('Painel em desenvolvimento: ' + tipo);
            }
        }
    </script>
</body>
</html>